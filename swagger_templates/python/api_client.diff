11a12
> import time
15c16
< from six.moves.urllib.parse import quote
---
> from six.moves.urllib.parse import quote, quote_plus
70a72,80
>         # This is used for detecting for the special case of a path parameter
>         # that is tagged with x-isi-url-encode-path-param (more details in the
>         # __call_api function).
>         self.quote_plus_tag = "__x-isi-url-encode-path-param__"
>         self.quote_plus_tag_len = len(self.quote_plus_tag)
> 
>         self.session_expiration = 0
>         self.inactive_expiration = 0
>         self.x_csrf_token = None
115a126,139
>                 v_str = str(v)
>                 # Check for the special case of the
>                 # x-isi-url-encode-path-param, which indicates that the
>                 # parameter should be encoded with quote_plus in order
>                 # to encode the '/' character.
>                 # check if the first part of v_str matches the tag
>                 if v_str[:self.quote_plus_tag_len] == self.quote_plus_tag:
>                     # remove "__x-isi-url-encode-path-param__"
>                     v_str = v_str[self.quote_plus_tag_len:]
>                     # then url-encode with quote_plus
>                     replacement = quote_plus(v_str)
>                 else:
>                     replacement = quote(v_str, safe=config.safe_chars_for_path_param)
> 
118,120c142
<                     '{%s}' % k,
<                     quote(str(v), safe=config.safe_chars_for_path_param)
<                 )
---
>                     '{%s}' % k, replacement)
136c158,160
<         self.update_params_for_auth(header_params, query_params, auth_settings)
---
>         if not self.configuration.host.startswith('papi://'):
>             self.update_params_for_auth(
>                 header_params, query_params, auth_settings)
412c436
<             if k in collection_formats:
---
>             if k in collection_formats and not isinstance(v, self.PRIMITIVE_TYPES):
514a539,572
>         # check if PAPI session has expired
>         now = time.time()
>         if now >= self.session_expiration or now >= self.inactive_expiration:
>             url = self.configuration.host + '/session/1/session'
>             body = {
>                 'username': self.configuration.username,
>                 'password': self.configuration.password,
>                 'services': ['platform']
>             }
>             response_data = self.rest_client.POST(
>                 url, headers=headers, body=body)
> 
>             if response_data.status == 201:
>                 cookies = response_data.getheaders()['Set-Cookie']
>                 self.cookie = cookies.split(';')[0]
>                 timeout = json.loads(response_data.data)['timeout_absolute']
>                 self.session_expiration = now + timeout
> 
>                 try:
>                     # extract X-CSRF token from response cookies
>                     isicsrf = cookies[cookies.find('isicsrf'):]
>                     self.x_csrf_token = isicsrf.split(';', 1)[0].split('=')[1]
>                 except IndexError:
>                     # this is not an anti-CSRF version of PAPI
>                     pass
> 
>         # 15 seconds is the default keep alive timeout
>         self.inactive_expiration = now + 15
> 
>         headers['Cookie'] = self.cookie
>         if self.x_csrf_token:
>             headers['Origin'] = self.configuration.host
>             headers['X-CSRF-Token'] = self.x_csrf_token
> 
